Problem Description: Given an array A[] of size n, you need to find the next greater element for each element in the array.
Return an array that consists of the next greater element of A[i] at index i.

The next greater element is the first greater element on an elementâ€™s right side in the array. e.g., an element A[j] 
would be the next greater element of A[i] such that A[j] > A[i] , i < j and j - i is minimum.

For example :

Input: A[] = {1, 2, 3, 4, 5}

Output = {2, 3, 4, 5, -1}

Input: A[] = {12, 1, 0, 17, 10}

Output: {17, 17, 17, -1, -1}
_______________________________________________________________________________________________________________________________
Solutions:


Brute Force: Linearly traverse till you find a next greater element
Using Stack Data Structure: Store elements in a stack and pop them as soon as you encounter a next greater element
___________________________________________________________________________________________________________________________________

https://www.youtube.com/watch?v=R2o2zUuu3ss&feature=emb_logo
https://www.youtube.com/watch?v=NXOOYYwpbg4

Python Code:

arr = [13,7,6,12]

stack = []
out = []

for i in range(len(arr)-1,-1,-1):

    if len(stack) == 0:
        out.append(-1)

    elif len(stack) > 0 and stack[-1] > arr[i]:
        out.append(stack[-1])

    elif len(stack) > 0 and stack[-1] <= arr[i]:
        # two cases -> if stack is not empty and if stack is empty
        while stack and stack[-1] <= arr[i]:
            stack.pop()
        
        if len(stack) == 0:
            out.append(-1)

        if len(stack) != 0:
            out.append(stack[-1])
    stack.append(arr[i])

out.reverse()

print(out)
