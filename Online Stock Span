https://leetcode.com/problems/online-stock-span/

Explanation: https://www.youtube.com/watch?v=hQLpniD_tjs

Code:

class StockSpanner:

    def __init__(self):
        self.stock = []  # initalize the array in which we will append stock prices
        

    def next(self, price: int) -> int:
    
        span = 1  # how many stocks are lesser than current including itself (min will always be 1)
        
        while self.stock and self.stock[-1][0] <= price:    # if top most element of stock is less than current price 
            span = span + self.stock[-1][1]                 # the we need to increase our span
            self.stock.pop()                                # since we have updated span we have to remove it from stack
                                                            # so that we don't count it again
            
        self.stock.append((price,span))  # append price and span in stock each time
        return span
_____________________________________________________________________________________________________________________________
Normal Version:
_______________

Similar to: Largest to left

arr = [10, 4, 5, 90, 120, 80]



stack = []
ans = []

for i in range(len(arr)):
    
    
    if len(stack) == 0:
        ans.append(-1)

    if len(stack) > 0 and stack[-1][0] > arr[i]:
        ans.append(stack[-1][1])

    if len(stack) > 0 and stack[-1][0] <= arr[i]:
        while stack and stack[-1][0] <= arr[i]:
            stack.pop()
        if len(stack) == 0:
            ans.append(-1)
        if len(stack) != 0:
            ans.append(stack[-1][1])

    stack.append([arr[i],i])
res = []
for i,j in enumerate(ans):
    res.append(i-j)



print(res)
